########################
# ***    PLUGINS   *** #
########################
# Set TMUX Jump key
set -g @jump-key 'O'

set -g @tpm_plugins ' \
  tmux-plugins/tpm \
  tmux-plugins/tmux-sensible \
  tmux-plugins/tmux-cpu \
  tmux-plugins/tmux-open \
  christoomey/vim-tmux-navigator \
  schasse/tmux-jump \
'

########################
# ***    DISPLAY   *** #
########################

# Set tmux to display in 256 colors
# set -g default-terminal    "screen-256color"
# set -ga terminal-overrides ",xterm-256color:Tc"

# Set tmux to display in 24 bit colors
set -g default-terminal "screen-256color"
set -ga terminal-overrides ",*256col*:Tc"

# Set border colors
set-option -g pane-border-style 'fg=#343D46,bg=colour0'
set-option -g pane-active-border-style 'fg=colour3,bg=colour0'

# Set status line message style
set -g message-style "fg=colour5,bg=default"

# Set mode style (including history bar)
set -g mode-style "fg=colour3"

########################
# ***    GENERAL   *** #
########################

# Set Ctrl-a as the default prefix key combination
# and unbind C-b to free it up
set -g prefix 'C-\'
unbind C-b

# Start windows numbering at 1
set -g base-index 1

# Start pane numbering at 1
setw -g pane-base-index 1

# Re-draw status window every 5 seconds
set -g status-interval 5

# set scrollback history to 10000 (10k)
set -g history-limit 10000

# enable scroll with mouse
set -g mouse on
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"
bind -n WheelDownPane select-pane -t= \; send-keys -M

# shorten command delay
set -sg escape-time 1
set -sg repeat-time 0

# use send-prefix to pass C-a through to application
bind 'C-\' send-prefix

# reload ~/.tmux.conf using PREFIX r
bind r source-file ~/.tmux.conf \; display "tmux.conf source"

# Bind <prefix>- to split window horizontally
bind - split-window -v -c "#{pane_current_path}"
bind '"' split-window -v -c "#{pane_current_path}"

# Bind <prefix>| to split window vertically
bind | split-window -h -c "#{pane_current_path}"

# Map vim movement keys as pane movement keys with prefix
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# resize panes using PREFIX H, J, K, L
bind H resize-pane -L 5
bind J resize-pane -D 5
bind K resize-pane -U 5
bind L resize-pane -R 5

# visual notification of activity in other windows
setw -g monitor-activity on
set -g visual-activity on

#########################
# ***  STATUS BAR   *** #
#########################

# Enable status bar
set-option -g status on

# Set window list to center
set -g status-justify centre

# Set default bg/fg settings for status bar
set-option -g status-bg default
set-option -g status-fg default
set-option -g status-style dim

set-option -g window-status-format "  #I:#W   " # Index:name
set-option -g window-status-current-format "  -=[ #I:#W ]=-  "
set-window-option -g window-status-current-style fg=colour14,bg=default
set-window-option -g window-status-activity-style fg=red,bg=default

# Configure CPU plugin colors for statusline

set -g @cpu_low_icon "=" # icon when cpu is low
set -g @cpu_medium_icon "≡" # icon when cpu is medium
set -g @cpu_high_icon "≣" # icon when cpu is high

set -g @cpu_low_fg_color "#[fg=green]"
set -g @cpu_medium_fg_color "#[fg=yellow]"
set -g @cpu_high_fg_color "#[fg=red]"

set -g @cpu_low_bg_color "#[bg=default]"
set -g @cpu_medium_bg_color "#[bg=default]"
set -g @cpu_high_bg_color "#[bg=default]"

set -g @cpu_percentage_format "%3.1f%%" # printf format to use to display percentage

set -g @cpu_medium_thresh "30" # medium percentage threshold
set -g @cpu_high_thresh "80" # high percentage threshold

# Left Status Bar: [CPU Usage]
# set -g status-left '#[fg=magenta]#S #[fg=colour8]| #(~/bin/gitmux -cfg ~/.gitmux.conf.yml "#{pane_current_path}")'
set -g status-left-length 85

# Right Status Bar: [Session Name][Date][Time]
# set -g status-right '#{cpu_fg_color}#{cpu_icon} #{cpu_percentage} #[fg=colour8]| #{ram_fg_color}#{ram_icon} #{ram_percentage} #[fg=colour8]|#[fg=yellow]#[fg=yellow,bold,bg=default] %b %d %Y #[fg=colour8]|#[fg=green,bg=default]#[bg=default,fg=green,bold]%l:%M %p #[fg=blue]'
# set -g status-left '#(~/bin/tmux-status-left.sh "#{pane_current_path}")'
# set -g status-right '#(~/bin/tmux-status-right.sh "#S")'

set -g status-justify centre
set -g status "on"
set -g status-left-style "none"
set -g message-command-style "fg=colour255,bg=colour238"
set -g status-right-style "none"
set -g pane-active-border-style "fg=colour190"
set -g status-style "none,bg=colour234"
set -g message-style "fg=colour255,bg=colour238"
set -g pane-border-style "fg=colour238"
set -g status-right-length "100"
set -g status-left-length "100"
setw -g window-status-activity-style "none"
setw -g window-status-separator ""
setw -g window-status-style "none,fg=colour85,bg=colour234"
set -g status-left '#{?client_prefix,#[bg=colour4],#[bg=colour190]}#[fg=colour17] #S #{?client_prefix,#[fg=colour4],#[fg=colour190]}#[bg=colour238,nobold,nounderscore,noitalics]#[fg=colour255,bg=colour238]#(~/bin/tmux-status-left.sh "#{pane_current_path}")#[fg=colour238,bg=colour234,nobold,nounderscore,noitalics]'
set -g status-right "#[fg=colour238,bg=colour234,nobold,nounderscore,noitalics]#[fg=colour255,bg=colour238] %Y-%m-%d  %H:%M #[fg=colour190,bg=colour238,nobold,nounderscore,noitalics]#{?client_prefix,#[fg=colour4],#[fg=colour190]}#[fg=colour17,bg=colour190]#{?client_prefix,#[bg=colour4],#[bg=colour190]} #h "
setw -g window-status-format "#[fg=colour85,bg=colour234] #I #[fg=colour85,bg=colour234] #W "
setw -g window-status-current-format "#[fg=colour234,bg=colour238,nobold,nounderscore,noitalics]#[fg=colour255,bg=colour238] #I #[fg=colour255,bg=colour238] #W #[fg=colour238,bg=colour234,nobold,nounderscore,noitalics]"
# Auto-hide status bar if pane is maximized
# set-hook -g 'after-resize-pane'  'run-shell -b "if [ \#{window_zoomed_flag} -eq 1 ]; then tmux set status off; else tmux set status on; fi"'
# set-hook -g 'after-new-window'   'run-shell -b "if [ \#{window_zoomed_flag} -eq 1 ]; then tmux set status off; else tmux set status on; fi"'
# set-hook -g 'after-kill-pane'    'run-shell -b "if [ \#{window_zoomed_flag} -eq 1 ]; then tmux set status off; else tmux set status on; fi"'
# set-hook -g 'pane-exited'        'run-shell -b "if [ \#{window_zoomed_flag} -eq 1 ]; then tmux set status off; else tmux set status on; fi"'
# set-hook -g 'after-split-window' 'run-shell -b "if [ \#{window_zoomed_flag} -gt 1 ]; then tmux set status off; else tmux set status on; fi"'

# Auto maximize zoomed panes after regain-focus
bind-key z run-shell -b "~/.config/tmux-hooks/zoomed-panes.sh toggle_zoom \'\#{zoomed_panes}\' \'\#{pane_id}\' \"\#{window_zoomed_flag}\""
set-hook -g 'pane-focus-in' 'run-shell -b "~/.config/tmux-hooks/zoomed-panes.sh gain_focus \"\#{zoomed_panes}\" \"\#{pane_id}\" \"\#{window_zoomed_flag}\""'
set -g focus-events on

# Initialize TMUX plugin manager
run '~/.tmux/plugins/tpm/tpm'
