# Path to oh-my-zsh installation.
export ZSH=~/.oh-my-zsh

source ~/.antigen.zsh

# Name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
ZSH_THEME="robbyrussell"

# TMUX
# Automatically start tmux
ZSH_TMUX_AUTOSTART=true

# Automatically connect to a previous session if it exists
ZSH_TMUX_AUTOCONNECT=true
ZSH_TMUX_UNICODE=true

# Enable command auto-correction.
ENABLE_CORRECTION="true"

# Display red dots whilst waiting for completion.
COMPLETION_WAITING_DOTS="true"

# Disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
DISABLE_UNTRACKED_FILES_DIRTY="true"

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
  git
  node
  brew
  tmux
  docker
  common-aliases
  sudo
  web-search
)

antigen bundle zuxfoucault/colored-man-pages_mod
antigen bundle zsh-users/zsh-syntax-highlighting
antigen bundle zpm-zsh/colorize

antigen apply

# User configuration
# Hide user@hostname if it's expected default user
DEFAULT_USER="skyatura"
prompt_context(){}

# Setting rg as the default source for fzf
export FZF_DEFAULT_COMMAND='rg --files'

# Apply the command to CTRL-T as well
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

# Set location of z installation
. /usr/local/etc/profile.d/z.sh

## FZF FUNCTIONS ##

# fo [FUZZY PATTERN] - Open the selected file with the default editor
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
fo() {
  local files
  IFS=$'\n' files=($(fzf-tmux --query="$1" --multi --select-1 --exit-0))
  [[ -n "$files" ]] && ${EDITOR:-vim} "${files[@]}"
}

# fh [FUZZY PATTERN] - Search in command history
fh() {
  print -z $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed 's/ *[0-9]* *//')
}

# fbr [FUZZY PATTERN] - Checkout specified branch
# Include remote branches, sorted by most recent commit and limited to 30
fgb() {
  local branches branch
  branches=$(git for-each-ref --count=30 --sort=-committerdate refs/heads/ --format="%(refname:short)") &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

# tm [SESSION_NAME | FUZZY PATTERN] - create new tmux session, or switch to existing one.
# Running `tm` will let you fuzzy-find a session mame
# Passing an argument to `ftm` will switch to that session if it exists or create it otherwise
ftm() {
  [[ -n "$TMUX" ]] && change="switch-client" || change="attach-session"
  if [ $1 ]; then
    tmux $change -t "$1" 2>/dev/null || (tmux new-session -d -s $1 && tmux $change -t "$1"); return
  fi
  session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --exit-0) &&  tmux $change -t "$session" || echo "No sessions found."
}

# tm [SESSION_NAME | FUZZY PATTERN] - delete tmux session
# Running `tm` will let you fuzzy-find a session mame to delete
# Passing an argument to `ftm` will delete that session if it exists
ftmk() {
  if [ $1 ]; then
    tmux kill-session -t "$1"; return
  fi
  session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --exit-0) &&  tmux kill-session -t "$session" || echo "No session found to delete."
}

# fuzzy grep via rg and open in vim with line number
fgr() {
  local file
  local line

  read -r file line <<<"$(rg --no-heading --line-number $@ | fzf -0 -1 | awk -F: '{print $1, $2}')"

  if [[ -n $file ]]
  then
     vim $file +$line
  fi
}

# Enabled zsh-autosuggestions
source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh

# Set default editor to nvim
export EDITOR='nvim'

# Enabled true color support for terminals
export NVIM_TUI_ENABLE_TRUE_COLOR=1

source $ZSH/oh-my-zsh.sh

# Set Spaceship as prompt
autoload -U promptinit; promptinit
prompt spaceship
SPACESHIP_PACKAGE_SHOW=false
SPACESHIP_NODE_SHOW=false
SPACESHIP_GIT_STATUS_STASHED=''

# Aliases
export IDF_PATH=/Users/skyatura/esp/esp-idf-v4.0
alias get_idf='. $HOME/esp/esp-idf-v4.0/export.sh'
alias vim="nvim"
alias v="nvim"
alias ni="npm install"
alias nis="npm install --save"
alias nid="npm install --save-dev"
alias nig="npm install -g"
alias nrd="npm run dev"
alias nrb="npm run build"
alias nrs="npm start"
alias nrt="npm run test"
alias top="vtop --theme=wizard"
alias l="colorls -lA --sd"
alias gc="gitmoji -c"
gac() {
  ga $@
  gc
  gp
}
tx() {
  tmuxinator $@
}
grepf() {
  grep -R "$@" .
}
function chpwd() {
    emulate -L zsh
    l -C
}

function tm-jbs() {
  tmux has-session -t JBS
  if [ $? != 0 ]
  then
    tmux new-session -s JBS -n API -c /Users/skyatura/projects/emiolo/jbs/api -d
    tmux new-window -t JBS -n App -c /Users/skyatura/projects/emiolo/jbs/app
    tmux new-window -t JBS -n Admin -c /Users/skyatura/projects/emiolo/jbs/admin
  fi
  tmux switch-client -t JBS
}

function tm-libbs() {
  tmux has-session -t Libbs
  if [ $? != 0 ]
  then
    tmux new-session -s Libbs -n API -d  -c /Users/skyatura/projects/emiolo/libbs/api
    tmux new-window  -t Libbs -n App     -c /Users/skyatura/projects/emiolo/libbs/app
    tmux new-window  -t Libbs -n Common  -c /Users/skyatura/projects/emiolo/libbs/common
    tmux new-window  -t Libbs -n Project -c /Users/skyatura/projects/emiolo/libbs
  fi
  tmux switch-client -t Libbs
}

# Loads NVM and Node
export NVM_DIR=~/.nvm
export NODE_VERSION="v10.16.3"
export PATH="$HOME/.nvm/versions/node/$NODE_VERSION/bin:$PATH"
#source $(brew --prefix nvm)/nvm.sh

# Load latest Ruby version
export PATH="/usr/local/opt/ruby/bin:$PATH"

# Load ruby packages
for D in `find "$HOME/.gem/ruby" -type d -mindepth 1 -maxdepth 1`
do
  PATH=$PATH:$D/bin
done

# Load tmuxinator completions
source ~/.gem/ruby/2.6.0/gems/tmuxinator-1.1.1/completion/tmuxinator.zsh

# Display MotD
if [[ -e $HOME/.motd ]]; then source $HOME/.motd; fi

# Azure mounts
function mount_azure () {
  accountName=eappsstorageacc1
  accountPassword='GbVeBlKsusmutCmIzMNu/nmWY9Rakn0PlJIzUJbvrf/b04lDA85s060eSrDIvQakX65gjAvgv1BJB8z2eqXUKg=='
  fileShare=$1
  dir="$HOME/cloud/azure/$accountName/$fileShare"
  if [[ ! -e $dir ]]; then
    mkdir -p $dir
  fi
  sudo mount -t cifs //$accountName.file.core.windows.net/$fileShare $dir -o vers=2.1,serverino,username=$accountName,password=$accountPassword
}

function mount_azure_ert () {
  accountName=ertstorage1
  accountPassword='RF7TXu/9CIq86VLBsk63J8qZocp9GnhuOKr5x8fYRPICdSh6LcM5gGohIOwaNMV6Prk2oNxLpWdDkaMpONZvlg=='
  fileShare=$1
  dir="$HOME/cloud/azure/$accountName/$fileShare"
  if [[ ! -e $dir ]]; then
    mkdir -p $dir
  fi
  sudo mount -t cifs //$accountName.file.core.windows.net/$fileShare $dir -o vers=2.1,serverino,username=$accountName,password=$accountPassword
}

function c () {
  cd $1
  l
}

# Load custom Scripts
export PATH="$HOME/.local/bin:$PATH"
export PATH="$HOME/bin:$PATH"
export PATH="/Users/skyatura/projects/SkyaTura/custom-chrome/depot_tools:$PATH"

source $HOME/.iterm2_shell_integration.zsh
export PATH="/usr/local/opt/imagemagick@6/bin:$PATH"
fpath+=${ZDOTDIR:-~}/.zsh_functions

export LANG="pt_BR.UTF-8"
export LC_COLLATE="pt_BR.UTF-8"
export LC_CTYPE="pt_BR.UTF-8"
export LC_MESSAGES="pt_BR.UTF-8"
export LC_MONETARY="pt_BR.UTF-8"
export LC_NUMERIC="pt_BR.UTF-8"
export LC_TIME="pt_BR.UTF-8"
export LC_ALL="pt_BR.UTF-8"
